# -*- makefile -*-

# Makefile for building a Moses system from a word-aligned corpus
# (c) 2011 - 2012 Ulrich Germann

# by default, we use good-turing smoothing for phrase tables
# (is that actually worth it?)

word-alignment ?= fast
pll.txt1 ?= ${WDIR}/crp/trn/aln/${word-alignment}/${L1}.txt.gz
pll.txt2 ?= ${WDIR}/crp/trn/aln/${word-alignment}/${L2}.txt.gz
pll.aln  ?= ${WDIR}/crp/trn/aln/${word-alignment}/${L1}-${L2}.symal.gz

define create_word_lexica

M4M_HISTORY += $1/${L1}-given-${L2}.lex.gz 

# reminder: $2,$3,$4 = L1text, L2text, alignment
$1/${L2}-given-${L1}.lex.gz: | $1/${L1}-given-${L2}.lex.gz 
$1/${L1}-given-${L2}.lex.gz: | $(if $2,$2,$$(pll.txt1))
$1/${L1}-given-${L2}.lex.gz: | $(if $3,$3,$$(pll.txt2))
$1/${L1}-given-${L2}.lex.gz: | $(if $4,$4,$$(pll.aln))
	$$(lock)
	$(moses.make-lex) \
	$(if $2,$2,$$(pll.txt1)) \
	$(if $3,$3,$$(pll.txt2)) \
	$(if $4,$4,$$(pll.aln))	 \
	$1/${L1}-given-${L2}.lex.gz \
	$1/${L2}-given-${L1}.lex.gz 
	$$(unlock)

endef

#################################################################################
# create_phrase_table: add rules to create a standard phrase table
# ADD RULES TO CREATE A STANDARD PHRASE TABLE FROM 
# $(pll.txt1),$(pll.txt2),$(pll.aln) that are specified as target-specific
# variables like this:
# $1.txt.gz: pll.txt1 = ...
# $1.txt.gz: pll.txt2 = ...
# $1.txt.gz: pll.aln  = ...
# This function is normally called indirectly via $(eval $(call add_bin_pt,...))
#
# Note: this section should be improved:
# - split into shards 
# - create bash file with jobs
# - run batch file in parallel 
#--------------------------------------------------------------------------------
define create_phrase_table

shardsdir := $(if $${phrase_extract.tmpdir},$${phrase_extract.tmpdir},$1.shards)
$(if $(filter $(if ${phrase_extract.tmpdir},${phrase_extract.tmpdir},$1.shards)/extract.done,\
${M4M_HISTORY}),,$(call extract_phrases,$${shardsdir},$${pll.txt1},$${pll.txt2},$${pll.aln}))

wlexdir := $(patsubst %/,%,$(dir $1))
$(if $(filter $(dir $1)${L1}-given-${L2}.lex.gz,${M4M_HISTORY}),\
,$(call create_word_lexica,$${wlexdir},$${pll.txt1},$${pll.txt2},$${pll.aln}))

M4M_HISTORY += $1.txt.gz

$1.txt.gz: smooth = $$(ptable.smoothing)
$1.txt.gz: | ${merge-sorted}
$1.txt.gz: | ${MOSES_BIN}/consolidate
$1.txt.gz: | $1.tmp/fwd.scored.gz
$1.txt.gz: | $1.tmp/bwd/scoring.done
	$$(info PTABLE SMOOTHING: $$(ptable.smoothing) for system $${PTTYPE} ($$@}))
	$$(lock)
	${MOSES_BIN}/consolidate \
	<(zcat -f $1.tmp/fwd.scored.gz) \
	<(${merge-sorted} $1.tmp/bwd/scored.*.gz) /dev/stdout \
	$$(if $$(smooth), $$(smooth) $1.tmp/fwd.coc) \
	| gzip > $$@_ && mv $$@_ $$@
	$$(unlock)

$1.tmp/fwd.scored.gz: | $(merge-sorted)
$1.tmp/fwd.scored.gz: | $${shardsdir}/extract.done
$1.tmp/fwd.scored.gz: | $${wlexdir}/${L2}-given-${L1}.lex.gz
	$$(lock)
	$(merge-sorted) $${shardsdir}/*.fwd.gz \
	| $(moses.score-phrases) ${MOSES_BIN}/score - $${wlexdir}/${L2}-given-${L1}.lex.gz \
	$${@D}/fwd $$(smooth) && mv $$@_ $$@
	$$(unlock)

$1.tmp/bwd/scoring.done: | $${shardsdir}/extract.done
$1.tmp/bwd/scoring.done: | $${wlexdir}/${L1}-given-${L2}.lex.gz
	$$(lock)
	$(merge-sorted) $${shardsdir}/*.bwd.gz \
	| ${moses.score-phrases} ${MOSES_BIN}/score - $${wlexdir}/${L1}-given-${L2}.lex.gz \
	$${@D}/scored $$(smooth) --Inverse && touch $$@
	$$(unlock)

endef 
# end of create_phrase_table
#################################################################################

#################################################################################
# $1: input factor(s)
# $2: output factor(s)
# $3: number of features
# $4: stem of phrase table 

define add_binary_phrase_table

$(if $(filter $4.txt.gz,${M4M_HISTORY}),,$(call create_phrase_table,$(strip $4)))

mystem   := $(strip $4)
ffname   := TranslationModel$(words ${PTABLE_ENTRIES})
MY_ENTRY := PhraseDictionaryBinary
MY_ENTRY += name=$$(ffname)
MY_ENTRY += num-features=$(strip $3)
MY_ENTRY += input-factor=$(strip $1)
MY_ENTRY += output-factor=$(strip $2)
MY_ENTRY += path=$(abspath $(strip $4))
$(if ${moses.ini_ttable-limit},MY_ENTRY += table-limit=${moses.ini_ttable-limit})
PTABLE_ENTRIES += $$(subst $$(space),;,$${MY_ENTRY})
PTABLES        += $(strip $4).binphr.idx

$(strip $4).binphr.idx: infactor=$1
$(strip $4).binphr.idx: outfactor=$2
$(strip $4).binphr.idx: nscores=$3

endef
#################################################################################
%.binphr.idx: %.txt.gz | ${MOSES_BIN}/processPhraseTable
	$(info MOSES_BIN=${MOSES_BIN})
	$(lock)
	zcat -f $*.txt.gz | ${MOSES_BIN}/processPhraseTable \
	-ttable $(infactor) $(outfactor) - -nscores $(nscores) -out $@.lock/$(notdir $*)
	mv $@.lock/$(notdir $*).* ${@D}
	$(unlock)

#################################################################################
# $1: input factor(s)
# $2: output factor(s)
# $3: number of features
# $4: stem of phrase table 

define add_text_phrase_table

$(if $(filter $4.txt.gz,${M4M_HISTORY}),,$(call create_phrase_table,$4))

ffname   := TranslationModel$(words ${PTABLE_ENTRIES})
MY_ENTRY := PhraseDictionaryMemory
MY_ENTRY += name=$$(ffname)
MY_ENTRY += num-features=$(strip $3)
MY_ENTRY += input-factor=$(strip $1)
MY_ENTRY += output-factor=$(strip $2)
MY_ENTRY += path=$(abspath $4).txt.gz
$(if ${moses.ini_ttable-limit},MY_ENTRY += table-limit=${moses.ini_ttable-limit})
PTABLE_ENTRIES += $$(subst $$(space),;,$${MY_ENTRY})
PTABLES        += $(strip $4).txt.gz

endef
#################################################################################

# .SECONDEXPANSION:


# #################################################################################
# # add_dynsa_pt: add a dynamic suffix array phrase table
# # $1,$2,$3: source and target factors, number of features
# # $4,$5,$6: source and target text (gzipped), wrd-aln. in gzipped symal format
# #--------------------------------------------------------------------------------
# define add_dynsa_phrase_table

# ffname   := TranslationModel$(words ${PTABLE_ENTRIES})
# MY_ENTRY := PhraseDictionaryDynSuffixArray
# MY_ENTRY += name=$$(ffname)
# MY_ENTRY += input-factor=$(strip $1)
# MY_ENTRY += output-factor=$(strip $2)
# MY_ENTRY += num-features=$(strip $3)
# MY_ENTRY += source=$(abspath $4)
# MY_ENTRY += target=$(abspath $5)
# MY_ENTRY += alignment=$(strip $6)
# MOSES_INI_PREREQ += $4 $5 $6
# PTABLE_ENTRIES += $$(subst $$(space),;,$${MY_ENTRY})
# PTABLES        += $(strip $4) $(strip $5) $(strip $6)

# endef

#################################################################################
# define sapt_set_system_tag

# mmsapt.extra-parameters := pfwd=$$(strip $${mmsapt.pfwd})
# mmsapt.extra-parameters += pbwd=$$(strip $${mmsapt.pbwd})
# mmsapt.extra-parameters += logcnt=$$(strip $${mmsapt.logcnt})
# mmsapt.extra-parameters += coh=$$(strip $${mmsapt.coh})
# mmsapt.extra-parameters += prov=$$(strip $${mmsapt.prov})
# mmsapt.extra-parameters += rare=$$(strip $${mmsapt.rare})
# mmsapt.extra-parameters += unal=$$(strip $${mmsapt.unal})
# mmsapt.extra-parameters += smooth=$$(strip $${mmsapt.smooth})
# mmsapt.extra-parameters += samples=$$(strip $${mmsapt.samples})
# mmsapt.extra-parameters += workers=$$(if $$(findstring $${mmsapt.samples},0),16,1)
# mmsapt.extra-parameters += lexalpha=$$(strip $$(mmsapt.alpha))

# # determine the number of features
# # first add feature flags of features that may be duplicated
# mmsapt.pfwd-features := $$(if $$(findstring g,$${mmsapt.pfwd}),1)
# mmsapt.pfwd-features += $$(if $$(findstring s,$${mmsapt.pfwd}),1)
# mmsapt.pfwd-features += $$(if $$(findstring r,$${mmsapt.pfwd}),1)
# $$(if $$(findstring +,\
# $${mmsapt.pfwd}),mmsapt.pfwd-features += $${mmsapt.pfwd-features})

# mmsapt.pbwd-features := $$(if $$(findstring g,$${mmsapt.pbwd}),1)
# mmsapt.pbwd-features += $$(if $$(findstring s,$${mmsapt.pbwd}),1)
# mmsapt.pbwd-features += $$(if $$(findstring r,$${mmsapt.pbwd}),1)
# $$(if $$(findstring +,\
# $${mmsapt.pbwd}),mmsapt.pbwd-features += $${mmsapt.pbwd-features})

# mmsapt.lcnt-features := $$(if $$(findstring r1,$${mmsapt.logcnt}),1)
# mmsapt.lcnt-features += $$(if $$(findstring s1,$${mmsapt.logcnt}),1)
# mmsapt.lcnt-features += $$(if $$(findstring g1,$${mmsapt.logcnt}),1)
# mmsapt.lcnt-features += $$(if $$(findstring j,$${mmsapt.logcnt}),1)
# mmsapt.lcnt-features += $$(if $$(findstring r2,$${mmsapt.logcnt}),1)
# $$(if $$(findstring +,\
# $${mmsapt.logcnt}),mmsapt.lcnt-features += $${mmsapt.lcnt-features})

# mmsapt.feature-flags := $${mmsapt.pfwd-flags}
# mmsapt.feature-flags += $${mmsapt.pbwd-flags}
# mmsapt.feature-flags += $${mmsapt.lcnt-flags}
# mmsapt.feature-flags += $$(if $$(findstring $${mmsapt.coh},1),1)
# mmsapt.feature-flags += $$(filter-out 0, $$(subst $${comma},$${space},$${mmsapt.rare}))
# mmsapt.feature-flags += $$(if $$(findstring $${mmsapt.unal},2),1 1,\
# 			$$(if $$(findstring $${mmsapt.unal},1),1))
# mmsapt.feature-flags += $$(filter-out 0, $$(subst $${comma},$${space},$${mmsapt.prov}))
# mmsapt.feature-flags += $$(filter-out 0, $$(subst $${comma},$${space},$${mmsapt.prov}))
# # yes, twice: provenance features are always corpus-specific
# # the two lexical features are currently always included:
# mmsapt.feature-flags += 1 1 

# mmsapt.num-features  := $$(words $${mmsapt.feature-flags})

# mmsapt.system_tag := $${ptable.source-factors}-$${ptable.target-factors}
# mmsapt.system_tag += f-$$(strip $${mmsapt.pfwd})
# mmsapt.system_tag += b-$$(strip $${mmsapt.pbwd})
# mmsapt.system_tag += l-$$(strip $${mmsapt.logcnt})
# mmsapt.system_tag += c-$$(strip $${mmsapt.coh})
# mmsapt.system_tag += r-$$(strip $${mmsapt.rare})
# mmsapt.system_tag += p-$$(strip $${mmsapt.prov})
# mmsapt.system_tag += u-$$(strip $${mmsapt.unal})
# mmsapt.system_tag += p-$$(mmsapt.smooth)
# mmsapt.system_tag += a-a$$(mmsapt.alpha)
# mmsapt.system_tag += n-$${mmsapt.sample}
# mmsapt.system_tag := $$(subst $$(space),.,$${mmsapt.system_tag})

# endef
#################################################################################

# make sure we have all the tools
REQUIRED_TOOLS ?=
REQUIRED_TOOLS += ${merge-sorted}
REQUIRED_TOOLS += ${MOSES_BIN}/consolidate
REQUIRED_TOOLS += ${MOSES_BIN}/processPhraseTable
${REQUIRED_TOOLS}:
	$(error $@ not found)

